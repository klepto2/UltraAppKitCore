//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class Process : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Process(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PInvoke.Process_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Process obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          PInvoke.delete_Process(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public WString path {
    get {
      WString ret = new WString(PInvoke.Process_path_get(swigCPtr), true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PipeStream readstream {
    get {
      global::System.IntPtr cPtr = PInvoke.Process_readstream_get(swigCPtr);
      PipeStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new PipeStream(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PipeStream writestream {
    get {
      global::System.IntPtr cPtr = PInvoke.Process_writestream_get(swigCPtr);
      PipeStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new PipeStream(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PipeStream errorstream {
    get {
      global::System.IntPtr cPtr = PInvoke.Process_errorstream_get(swigCPtr);
      PipeStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new PipeStream(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Process() : this(PInvoke.new_Process(), true) {
  }

  public virtual System.IntPtr GetHandle() { 
    System.IntPtr cPtr = PInvoke.Process_GetHandle(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return cPtr;
    }

  public virtual ProcessStatus GetStatus() {
    ProcessStatus ret = (ProcessStatus)PInvoke.Process_GetStatus(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int Wait() {
    int ret = PInvoke.Process_Wait(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int Close() {
    int ret = PInvoke.Process_Close(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
