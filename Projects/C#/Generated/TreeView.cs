//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class TreeView : Widget {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal TreeView(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PInvoke.TreeView_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TreeView obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          PInvoke.delete_TreeView(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public TreeViewNode root {
    get {
      global::System.IntPtr cPtr = PInvoke.TreeView_root_get(swigCPtr);
      TreeViewNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new TreeViewNode(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public TreeView() : this(PInvoke.new_TreeView(), true) {
  }

  public virtual new void UpdateColors() {
    PInvoke.TreeView_UpdateColors(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void MouseWheel(int delta, int x, int y) {
    PInvoke.TreeView_MouseWheel(swigCPtr, delta, x, y);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual void SelectNode(Widget node, bool selected) {
    PInvoke.TreeView_SelectNode__SWIG_0(swigCPtr, Widget.getCPtr(node), selected);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual void SelectNode(Widget node) {
    PInvoke.TreeView_SelectNode__SWIG_1(swigCPtr, Widget.getCPtr(node));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void FilterItems(WString filter) {
    PInvoke.TreeView_FilterItems(swigCPtr, WString.getCPtr(filter));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual TreeViewNode GetSelectedNode() {
    global::System.IntPtr cPtr = PInvoke.TreeView_GetSelectedNode(swigCPtr);
    TreeViewNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new TreeViewNode(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual VectorTreeViewNode GetSelectedNodes() {
    VectorTreeViewNode ret = new VectorTreeViewNode(PInvoke.TreeView_GetSelectedNodes(swigCPtr), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void MouseDown(MouseButton button, int x, int y) {
    PInvoke.TreeView_MouseDown(swigCPtr, (int)button, x, y);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void DoubleClick(MouseButton button, int x, int y) {
    PInvoke.TreeView_DoubleClick(swigCPtr, (int)button, x, y);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void MouseUp(MouseButton button, int x, int y) {
    PInvoke.TreeView_MouseUp(swigCPtr, (int)button, x, y);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void MouseMove(int x, int y) {
    PInvoke.TreeView_MouseMove(swigCPtr, x, y);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void GainFocus() {
    PInvoke.TreeView_GainFocus(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void LoseFocus() {
    PInvoke.TreeView_LoseFocus(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void MouseEnter(int x, int y) {
    PInvoke.TreeView_MouseEnter(swigCPtr, x, y);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void MouseLeave(int x, int y) {
    PInvoke.TreeView_MouseLeave(swigCPtr, x, y);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void KeyDown(KeyCode key) {
    PInvoke.TreeView_KeyDown(swigCPtr, (int)key);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void KeyUp(KeyCode key) {
    PInvoke.TreeView_KeyUp(swigCPtr, (int)key);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void KeyChar(int keychar) {
    PInvoke.TreeView_KeyChar(swigCPtr, keychar);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void UpdateLayout() {
    PInvoke.TreeView_UpdateLayout(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public override void Draw(int x, int y, int width, int height) {
    PInvoke.TreeView_Draw(swigCPtr, x, y, width, height);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual int DrawNode(TreeViewNode node, int index, int level) {
    int ret = PInvoke.TreeView_DrawNode__SWIG_0(swigCPtr, TreeViewNode.getCPtr(node), index, level);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int DrawNode(TreeViewNode node, int index) {
    int ret = PInvoke.TreeView_DrawNode__SWIG_1(swigCPtr, TreeViewNode.getCPtr(node), index);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int DrawNode(TreeViewNode node) {
    int ret = PInvoke.TreeView_DrawNode__SWIG_2(swigCPtr, TreeViewNode.getCPtr(node));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
