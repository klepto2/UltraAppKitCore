//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class DDSTextureLoader : Loader {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal DDSTextureLoader(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PInvoke.DDSTextureLoader_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DDSTextureLoader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          PInvoke.delete_DDSTextureLoader(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public int loadpixmapmiplevel {
    set {
      PInvoke.DDSTextureLoader_loadpixmapmiplevel_set(swigCPtr, value);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = PInvoke.DDSTextureLoader_loadpixmapmiplevel_get(swigCPtr);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int loadpixmapface {
    set {
      PInvoke.DDSTextureLoader_loadpixmapface_set(swigCPtr, value);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = PInvoke.DDSTextureLoader_loadpixmapface_get(swigCPtr);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DDSTextureLoader() : this(PInvoke.new_DDSTextureLoader(), true) {
  }

  public override bool Reload(Stream stream, Object o, LoadFlags flags) {
    bool ret = PInvoke.DDSTextureLoader_Reload__SWIG_0(swigCPtr, Stream.getCPtr(stream), Object.getCPtr(o), (int)flags);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Reload(Stream stream, Object o) {
    bool ret = PInvoke.DDSTextureLoader_Reload__SWIG_1(swigCPtr, Stream.getCPtr(stream), Object.getCPtr(o));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DXGI_FORMAT GetDXGIFormat(DDS_PIXELFORMAT ddpf) {
    DXGI_FORMAT ret = (DXGI_FORMAT)PInvoke.DDSTextureLoader_GetDXGIFormat(DDS_PIXELFORMAT.getCPtr(ddpf));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
