//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class Display : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Display(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PInvoke.Display_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Display obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          PInvoke.delete_Display(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public VectorIVec2 graphicsmodes {
    get {
      VectorIVec2 ret = new VectorIVec2(PInvoke.Display_graphicsmodes_get(swigCPtr), false);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public iVec2 position {
    get {
      iVec2 ret = new iVec2(PInvoke.Display_position_get(swigCPtr), false);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public iVec2 size {
    get {
      iVec2 ret = new iVec2(PInvoke.Display_size_get(swigCPtr), false);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float scale {
    get {
      float ret = PInvoke.Display_scale_get(swigCPtr);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  private bool EqualEqual(Display display) {
    bool ret = PInvoke.Display_EqualEqual(swigCPtr, Display.getCPtr(display));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool NotEqual(Display display) {
    bool ret = PInvoke.Display_NotEqual(swigCPtr, Display.getCPtr(display));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public Display() : this(PInvoke.new_Display(), true) {
  }

  public iVec2 GetPosition() {
    iVec2 ret = new iVec2(PInvoke.Display_GetPosition(swigCPtr), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public iVec2 GetSize() {
    iVec2 ret = new iVec2(PInvoke.Display_GetSize(swigCPtr), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public iVec4 ClientArea() {
    iVec4 ret = new iVec4(PInvoke.Display_ClientArea(swigCPtr), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2 GetScale() {
    Vec2 ret = new Vec2(PInvoke.Display_GetScale(swigCPtr), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
