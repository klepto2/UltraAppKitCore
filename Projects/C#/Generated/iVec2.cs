//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class iVec2 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal iVec2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(iVec2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~iVec2() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PInvoke.delete_iVec2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static iVec2 operator+(iVec2 arg1, iVec2 arg2) {
        return arg1.Plus(arg2);
    }

    public static iVec2 operator-(iVec2 arg1, iVec2 arg2) {
        return arg1.Minus(arg2);
    }

    public static iVec2 operator-(iVec2 arg1) {
        return arg1.Minus();
    }

     public static bool operator==(iVec2 arg1, iVec2 arg2) {
         if ((object)arg1 == null)
            return (object)arg2 == null;

        if ((object)arg2 == null)
            return (object)arg1 == null;

        return arg1.EqualEqual(arg2);
    }

    public static bool operator!=(iVec2 arg1, iVec2 arg2) {
        return !(arg1 == arg2);
    }

    public static bool operator<(iVec2 arg1, iVec2 arg2) {
        return arg1.LessThan(arg2);
    }

    public static bool operator>(iVec2 arg1, iVec2 arg2) {
        return !arg1.LessThan(arg2) && !arg1.EqualEqual(arg2);
    }

    public override string ToString() {
        return _ToWString();
    }

  public int x {
    set {
      PInvoke.iVec2_x_set(swigCPtr, value);
    } 
    get {
      int ret = PInvoke.iVec2_x_get(swigCPtr);
      return ret;
    } 
  }

  public int r {
    set {
      PInvoke.iVec2_r_set(swigCPtr, value);
    } 
    get {
      int ret = PInvoke.iVec2_r_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      PInvoke.iVec2_y_set(swigCPtr, value);
    } 
    get {
      int ret = PInvoke.iVec2_y_get(swigCPtr);
      return ret;
    } 
  }

  public int g {
    set {
      PInvoke.iVec2_g_set(swigCPtr, value);
    } 
    get {
      int ret = PInvoke.iVec2_g_get(swigCPtr);
      return ret;
    } 
  }

  public iVec2() : this(PInvoke.new_iVec2__SWIG_0(), true) {
  }

  public iVec2(int x) : this(PInvoke.new_iVec2__SWIG_1(x), true) {
  }

  public iVec2(int x, int y) : this(PInvoke.new_iVec2__SWIG_2(x, y), true) {
  }

  private iVec2 Minus() {
    iVec2 ret = new iVec2(PInvoke.iVec2_Minus__SWIG_0(swigCPtr), true);
    return ret;
  }

  private iVec2 Plus(iVec2 v) {
    iVec2 ret = new iVec2(PInvoke.iVec2_Plus(swigCPtr, iVec2.getCPtr(v)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private iVec2 Minus(iVec2 v) {
    iVec2 ret = new iVec2(PInvoke.iVec2_Minus__SWIG_1(swigCPtr, iVec2.getCPtr(v)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private void PlusEqual(iVec2 v) {
    PInvoke.iVec2_PlusEqual(swigCPtr, iVec2.getCPtr(v));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  private void MinusEqual(iVec2 v) {
    PInvoke.iVec2_MinusEqual(swigCPtr, iVec2.getCPtr(v));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  private bool LessThan(iVec2 v) {
    bool ret = PInvoke.iVec2_LessThan(swigCPtr, iVec2.getCPtr(v));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool NotEqual(iVec2 v) {
    bool ret = PInvoke.iVec2_NotEqual(swigCPtr, iVec2.getCPtr(v));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool EqualEqual(iVec2 v) {
    bool ret = PInvoke.iVec2_EqualEqual(swigCPtr, iVec2.getCPtr(v));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private string _ToWString() {
    string ret = PInvoke.iVec2__ToWString(swigCPtr);
    return ret;
  }

}

}
