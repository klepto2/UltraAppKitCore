//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class Package : Asset {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Package(global::System.IntPtr cPtr, bool cMemoryOwn) : base(PInvoke.Package_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Package obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          PInvoke.delete_Package(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Package() : this(PInvoke.new_Package(), true) {
  }

  public virtual new void Reset() {
    PInvoke.Package_Reset(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual new bool Reload(Stream stream, LoadFlags flags) {
    bool ret = PInvoke.Package_Reload__SWIG_0(swigCPtr, Stream.getCPtr(stream), (int)flags);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual new bool Reload(Stream stream) {
    bool ret = PInvoke.Package_Reload__SWIG_1(swigCPtr, Stream.getCPtr(stream));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Asset Copy() {
    global::System.IntPtr cPtr = PInvoke.Package_Copy(swigCPtr);
    Asset ret = (cPtr == global::System.IntPtr.Zero) ? null : new Asset(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Reload(LoadFlags flags) {
    bool ret = PInvoke.Package_Reload__SWIG_2(swigCPtr, (int)flags);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Reload() {
    bool ret = PInvoke.Package_Reload__SWIG_3(swigCPtr);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int FileType(WString path) {
    int ret = PInvoke.Package_FileType(swigCPtr, WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ulong FileSize(WString path) {
    ulong ret = PInvoke.Package_FileSize(swigCPtr, WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual VectorWString LoadDir(WString path) {
    VectorWString ret = new VectorWString(PInvoke.Package_LoadDir(swigCPtr, WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Stream ReadFile(WString path) {
    global::System.IntPtr cPtr = PInvoke.Package_ReadFile(swigCPtr, WString.getCPtr(path));
    Stream ret = (cPtr == global::System.IntPtr.Zero) ? null : new Stream(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
