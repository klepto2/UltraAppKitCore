//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ListEventListener : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<EventListener>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ListEventListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ListEventListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ListEventListener() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UltraAppKitPINVOKE.delete_ListEventListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ListEventListener(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (EventListener element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public ListEventListenerNode First {
    get {
      if (Count == 0)
        return null;
      return new ListEventListenerNode(getFirstIter(), this);
    }
  }

  public ListEventListenerNode Last {
    get {
      if (Count == 0)
        return null;
      return new ListEventListenerNode(getLastIter(), this);
    }
  }

  public ListEventListenerNode AddFirst(EventListener value) {
    push_front(value);
    return new ListEventListenerNode(getFirstIter(), this);
  }

  public void AddFirst(ListEventListenerNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public ListEventListenerNode AddLast(EventListener value) {
    push_back(value);
    return new ListEventListenerNode(getLastIter(), this);
  }

  public void AddLast(ListEventListenerNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public ListEventListenerNode AddBefore(ListEventListenerNode node, EventListener value) {
    return new ListEventListenerNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(ListEventListenerNode node, ListEventListenerNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public ListEventListenerNode AddAfter(ListEventListenerNode node, EventListener value) {
    node = node.Next;
    return new ListEventListenerNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(ListEventListenerNode node, ListEventListenerNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(EventListener value) {
    AddLast(value);
  }

  public void Remove(ListEventListenerNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(EventListener[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    ListEventListenerNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(ListEventListenerNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(ListEventListenerNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<EventListener> global::System.Collections.Generic.IEnumerable<EventListener>.GetEnumerator() {
    return new ListEventListenerEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new ListEventListenerEnumerator(this);
  }

  public ListEventListenerEnumerator GetEnumerator() {
    return new ListEventListenerEnumerator(this);
  }

  public sealed class ListEventListenerEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<EventListener>
  {
    private ListEventListener collectionRef;
    private ListEventListenerNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public ListEventListenerEnumerator(ListEventListener collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public EventListener Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (EventListener)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class ListEventListenerNode {
    internal ListEventListener list;
    internal System.IntPtr iter;
    internal EventListener csharpvalue;
    internal bool inlist;

    public ListEventListenerNode(EventListener value) {
      csharpvalue = value;
      inlist = false;
    }

    internal ListEventListenerNode(System.IntPtr iter, ListEventListener list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public ListEventListener List {
      get {
        return this.list;
      }
    }

    public ListEventListenerNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new ListEventListenerNode(list.getNextIter(iter), list);
      }
    }

    public ListEventListenerNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new ListEventListenerNode(list.getPrevIter(iter), list);
      }
    }

    public EventListener Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(ListEventListenerNode node1, ListEventListenerNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(ListEventListenerNode node1, ListEventListenerNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(ListEventListenerNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((ListEventListenerNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(EventListener x) {
    UltraAppKitPINVOKE.ListEventListener_push_front(swigCPtr, EventListener.getCPtr(x));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  private void push_back(EventListener x) {
    UltraAppKitPINVOKE.ListEventListener_push_back(swigCPtr, EventListener.getCPtr(x));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveFirst() {
    UltraAppKitPINVOKE.ListEventListener_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    UltraAppKitPINVOKE.ListEventListener_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = UltraAppKitPINVOKE.ListEventListener_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    UltraAppKitPINVOKE.ListEventListener_Clear(swigCPtr);
  }

  private EventListener getItem(global::System.IntPtr iter) {
    EventListener ret = new EventListener(UltraAppKitPINVOKE.ListEventListener_getItem(swigCPtr, iter), false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, EventListener val) {
    UltraAppKitPINVOKE.ListEventListener_setItem(swigCPtr, iter, EventListener.getCPtr(val));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = UltraAppKitPINVOKE.ListEventListener_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = UltraAppKitPINVOKE.ListEventListener_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = UltraAppKitPINVOKE.ListEventListener_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = UltraAppKitPINVOKE.ListEventListener_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, EventListener value) {
    global::System.IntPtr ret = UltraAppKitPINVOKE.ListEventListener_insertNode(swigCPtr, iter, EventListener.getCPtr(value));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    UltraAppKitPINVOKE.ListEventListener_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    UltraAppKitPINVOKE.ListEventListener_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = UltraAppKitPINVOKE.ListEventListener_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public ListEventListener() : this(UltraAppKitPINVOKE.new_ListEventListener(), true) {
  }

}
