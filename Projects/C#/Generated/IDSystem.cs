//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IDSystem : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IDSystem(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UltraAppKitPINVOKE.IDSystem_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IDSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          UltraAppKitPINVOKE.delete_IDSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public IDSystem(int max) : this(UltraAppKitPINVOKE.new_IDSystem__SWIG_0(max), true) {
  }

  public IDSystem() : this(UltraAppKitPINVOKE.new_IDSystem__SWIG_1(), true) {
  }

  public int AllocID(int count) {
    int ret = UltraAppKitPINVOKE.IDSystem_AllocID__SWIG_0(swigCPtr, count);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AllocID() {
    int ret = UltraAppKitPINVOKE.IDSystem_AllocID__SWIG_1(swigCPtr);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IDHandle AllocHandle(int count) {
    global::System.IntPtr cPtr = UltraAppKitPINVOKE.IDSystem_AllocHandle__SWIG_0(swigCPtr, count);
    IDHandle ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDHandle(cPtr, true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IDHandle AllocHandle() {
    global::System.IntPtr cPtr = UltraAppKitPINVOKE.IDSystem_AllocHandle__SWIG_1(swigCPtr);
    IDHandle ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDHandle(cPtr, true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ReleaseID(int id) {
    UltraAppKitPINVOKE.IDSystem_ReleaseID(swigCPtr, id);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

}
