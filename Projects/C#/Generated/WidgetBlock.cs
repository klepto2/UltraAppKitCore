//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class WidgetBlock : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WidgetBlock(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WidgetBlock obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~WidgetBlock() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PInvoke.delete_WidgetBlock(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public WidgetBlock() : this(PInvoke.new_WidgetBlock(), true) {
  }

  public float iconscale {
    set {
      PInvoke.WidgetBlock_iconscale_set(swigCPtr, value);
    } 
    get {
      float ret = PInvoke.WidgetBlock_iconscale_get(swigCPtr);
      return ret;
    } 
  }

  public Icon icon {
    set {
      PInvoke.WidgetBlock_icon_set(swigCPtr, Icon.getCPtr(value));
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_icon_get(swigCPtr);
      Icon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Icon(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public TextureFilter filter {
    set {
      PInvoke.WidgetBlock_filter_set(swigCPtr, (int)value);
    } 
    get {
      TextureFilter ret = (TextureFilter)PInvoke.WidgetBlock_filter_get(swigCPtr);
      return ret;
    } 
  }

  public float gradient {
    set {
      PInvoke.WidgetBlock_gradient_set(swigCPtr, value);
    } 
    get {
      float ret = PInvoke.WidgetBlock_gradient_get(swigCPtr);
      return ret;
    } 
  }

  public bool hidden {
    set {
      PInvoke.WidgetBlock_hidden_set(swigCPtr, value);
    } 
    get {
      bool ret = PInvoke.WidgetBlock_hidden_get(swigCPtr);
      return ret;
    } 
  }

  public iVec2 position {
    set {
      PInvoke.WidgetBlock_position_set(swigCPtr, iVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_position_get(swigCPtr);
      iVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new iVec2(cPtr, false);
      return ret;
    } 
  }

  public iVec2 size {
    set {
      PInvoke.WidgetBlock_size_set(swigCPtr, iVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_size_get(swigCPtr);
      iVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new iVec2(cPtr, false);
      return ret;
    } 
  }

  public string text {
    set {
      PInvoke.WidgetBlock_text_set(swigCPtr, value);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = PInvoke.WidgetBlock_text_get(swigCPtr);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Vec4 color {
    set {
      PInvoke.WidgetBlock_color_set(swigCPtr, Vec4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_color_get(swigCPtr);
      Vec4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec4(cPtr, false);
      return ret;
    } 
  }

  public int radius {
    set {
      PInvoke.WidgetBlock_radius_set(swigCPtr, value);
    } 
    get {
      int ret = PInvoke.WidgetBlock_radius_get(swigCPtr);
      return ret;
    } 
  }

  public bool wireframe {
    set {
      PInvoke.WidgetBlock_wireframe_set(swigCPtr, value);
    } 
    get {
      bool ret = PInvoke.WidgetBlock_wireframe_get(swigCPtr);
      return ret;
    } 
  }

  public int textalignment {
    set {
      PInvoke.WidgetBlock_textalignment_set(swigCPtr, value);
    } 
    get {
      int ret = PInvoke.WidgetBlock_textalignment_get(swigCPtr);
      return ret;
    } 
  }

  public int fontsize {
    set {
      PInvoke.WidgetBlock_fontsize_set(swigCPtr, value);
    } 
    get {
      int ret = PInvoke.WidgetBlock_fontsize_get(swigCPtr);
      return ret;
    } 
  }

  public bool textdefined {
    set {
      PInvoke.WidgetBlock_textdefined_set(swigCPtr, value);
    } 
    get {
      bool ret = PInvoke.WidgetBlock_textdefined_get(swigCPtr);
      return ret;
    } 
  }

  public bool clipregiondefined {
    set {
      PInvoke.WidgetBlock_clipregiondefined_set(swigCPtr, value);
    } 
    get {
      bool ret = PInvoke.WidgetBlock_clipregiondefined_get(swigCPtr);
      return ret;
    } 
  }

  public iVec4 clipregion {
    set {
      PInvoke.WidgetBlock_clipregion_set(swigCPtr, iVec4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_clipregion_get(swigCPtr);
      iVec4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new iVec4(cPtr, false);
      return ret;
    } 
  }

  public Pixmap pixmap {
    set {
      PInvoke.WidgetBlock_pixmap_set(swigCPtr, Pixmap.getCPtr(value));
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_pixmap_get(swigCPtr);
      Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IntFourArray edgepadding {
    set {
      PInvoke.WidgetBlock_edgepadding_set(swigCPtr, IntFourArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_edgepadding_get(swigCPtr);
      IntFourArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntFourArray(cPtr, false);
      return ret;
    } 
  }

  public IntFourArray alignment {
    set {
      PInvoke.WidgetBlock_alignment_set(swigCPtr, IntFourArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_alignment_get(swigCPtr);
      IntFourArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntFourArray(cPtr, false);
      return ret;
    } 
  }

  public IntFourArray edgedistance {
    set {
      PInvoke.WidgetBlock_edgedistance_set(swigCPtr, IntFourArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.WidgetBlock_edgedistance_get(swigCPtr);
      IntFourArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntFourArray(cPtr, false);
      return ret;
    } 
  }

  public virtual void SetClipRegion(int x, int y, int width, int height) {
    PInvoke.WidgetBlock_SetClipRegion(swigCPtr, x, y, width, height);
  }

  public virtual void SetPixmap(Pixmap pixmap, Vec4 color) {
    PInvoke.WidgetBlock_SetPixmap__SWIG_0(swigCPtr, Pixmap.getCPtr(pixmap), Vec4.getCPtr(color));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual void SetPixmap(Pixmap pixmap) {
    PInvoke.WidgetBlock_SetPixmap__SWIG_1(swigCPtr, Pixmap.getCPtr(pixmap));
  }

  public virtual void SetText(WString text) {
    PInvoke.WidgetBlock_SetText(swigCPtr, WString.getCPtr(text));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual void SetLayout(int left, int right, int top, int bottom) {
    PInvoke.WidgetBlock_SetLayout(swigCPtr, left, right, top, bottom);
  }

  public virtual void SetShape(iVec2 position, iVec2 size) {
    PInvoke.WidgetBlock_SetShape(swigCPtr, iVec2.getCPtr(position), iVec2.getCPtr(size));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual void SetIcon(Icon icon, float scale, Vec4 color) {
    PInvoke.WidgetBlock_SetIcon__SWIG_0(swigCPtr, Icon.getCPtr(icon), scale, Vec4.getCPtr(color));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public virtual void SetIcon(Icon icon, float scale) {
    PInvoke.WidgetBlock_SetIcon__SWIG_1(swigCPtr, Icon.getCPtr(icon), scale);
  }

  public virtual void SetIcon(Icon icon) {
    PInvoke.WidgetBlock_SetIcon__SWIG_2(swigCPtr, Icon.getCPtr(icon));
  }

}

}
