//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class MapWindow : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary< System.IntPtr , WindowWeakPtr>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MapWindow(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MapWindow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MapWindow() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PInvoke.delete_MapWindow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public WindowWeakPtr this[ System.IntPtr  key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue( System.IntPtr  key, out WindowWeakPtr value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(WindowWeakPtr);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection< System.IntPtr > Keys {
    get {
      global::System.Collections.Generic.ICollection< System.IntPtr > keys = new global::System.Collections.Generic.List< System.IntPtr >();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<WindowWeakPtr> Values {
    get {
      global::System.Collections.Generic.ICollection<WindowWeakPtr> vals = new global::System.Collections.Generic.List<WindowWeakPtr>();
      foreach (global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList< System.IntPtr > keyList = new global::System.Collections.Generic.List< System.IntPtr >(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
       System.IntPtr  currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>>.GetEnumerator() {
    return new MapWindowEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new MapWindowEnumerator(this);
  }

  public MapWindowEnumerator GetEnumerator() {
    return new MapWindowEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class MapWindowEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>>
  {
    private MapWindow collectionRef;
    private global::System.Collections.Generic.IList< System.IntPtr > keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public MapWindowEnumerator(MapWindow collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List< System.IntPtr >(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
         System.IntPtr  currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair< System.IntPtr , WindowWeakPtr>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public MapWindow() : this(PInvoke.new_MapWindow__SWIG_0(), true) {
  }

  public MapWindow(MapWindow other) : this(PInvoke.new_MapWindow__SWIG_1(MapWindow.getCPtr(other)), true) {
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = PInvoke.MapWindow_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = PInvoke.MapWindow_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    PInvoke.MapWindow_Clear(swigCPtr);
  }

  private WindowWeakPtr getitem( System.IntPtr  key) {
    WindowWeakPtr ret = new WindowWeakPtr(PInvoke.MapWindow_getitem(swigCPtr,  ref key ), false);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem( System.IntPtr  key, WindowWeakPtr x) {
    PInvoke.MapWindow_setitem(swigCPtr,  ref key , WindowWeakPtr.getCPtr(x));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey( System.IntPtr  key) {
    bool ret = PInvoke.MapWindow_ContainsKey(swigCPtr,  ref key );
    return ret;
  }

  public void Add( System.IntPtr  key, WindowWeakPtr value) {
    PInvoke.MapWindow_Add(swigCPtr,  ref key , WindowWeakPtr.getCPtr(value));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public bool Remove( System.IntPtr  key) {
    bool ret = PInvoke.MapWindow_Remove(swigCPtr,  ref key );
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = PInvoke.MapWindow_create_iterator_begin(swigCPtr);
    return ret;
  }

  private  System.IntPtr  get_next_key(global::System.IntPtr swigiterator) {
                System.IntPtr ptr = PInvoke.MapWindow_get_next_key(swigCPtr, swigiterator);
                System.IntPtr ret = (System.IntPtr)global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr,
typeof(System.IntPtr));
                return ret;
        }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    PInvoke.MapWindow_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
