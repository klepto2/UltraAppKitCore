//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public partial class Functions {
  private static TextureFlags BinaryOR(TextureFlags a, TextureFlags b) {
    TextureFlags ret = (TextureFlags)PInvoke.BinaryOR__SWIG_0((int)a, (int)b);
    return ret;
  }

  private static RenderLayer BinaryOR(RenderLayer a, RenderLayer b) {
    RenderLayer ret = (RenderLayer)PInvoke.BinaryOR__SWIG_1((int)a, (int)b);
    return ret;
  }

  private static WindowStyles BinaryOR(WindowStyles a, WindowStyles b) {
    WindowStyles ret = (WindowStyles)PInvoke.BinaryOR__SWIG_2((int)a, (int)b);
    return ret;
  }

  private static LoadFlags BinaryOR(LoadFlags a, LoadFlags b) {
    LoadFlags ret = (LoadFlags)PInvoke.BinaryOR__SWIG_3((int)a, (int)b);
    return ret;
  }

  private static LoadFlags BinaryNot(LoadFlags a) {
    LoadFlags ret = (LoadFlags)PInvoke.BinaryNot__SWIG_0((int)a);
    return ret;
  }

  private static SaveFlags BinaryOR(SaveFlags a, SaveFlags b) {
    SaveFlags ret = (SaveFlags)PInvoke.BinaryOR__SWIG_4((int)a, (int)b);
    return ret;
  }

  private static SaveFlags BinaryNot(SaveFlags a) {
    SaveFlags ret = (SaveFlags)PInvoke.BinaryNot__SWIG_1((int)a);
    return ret;
  }

  private static SaveFlags BinaryAnd(SaveFlags a, SaveFlags b) {
    SaveFlags ret = (SaveFlags)PInvoke.BinaryAnd__SWIG_0((int)a, (int)b);
    return ret;
  }

  private static ClearMode BinaryOR(ClearMode a, ClearMode b) {
    ClearMode ret = (ClearMode)PInvoke.BinaryOR__SWIG_5((int)a, (int)b);
    return ret;
  }

  private static EntityBounds BinaryOR(EntityBounds a, EntityBounds b) {
    EntityBounds ret = (EntityBounds)PInvoke.BinaryOR__SWIG_6((int)a, (int)b);
    return ret;
  }

  private static EntityBounds BinaryAnd(EntityBounds a, EntityBounds b) {
    EntityBounds ret = (EntityBounds)PInvoke.BinaryAnd__SWIG_1((int)a, (int)b);
    return ret;
  }

  private static EntityBounds BinaryNot(EntityBounds a) {
    EntityBounds ret = (EntityBounds)PInvoke.BinaryNot__SWIG_2((int)a);
    return ret;
  }

  public static byte Alpha(uint rgba) {
    byte ret = PInvoke.Alpha(rgba);
    return ret;
  }

  public static byte Blue(uint rgba) {
    byte ret = PInvoke.Blue(rgba);
    return ret;
  }

  public static byte Green(uint rgba) {
    byte ret = PInvoke.Green(rgba);
    return ret;
  }

  public static byte Red(uint rgba) {
    byte ret = PInvoke.Red(rgba);
    return ret;
  }

  public static float Abs(float f) {
    float ret = PInvoke.Abs(f);
    return ret;
  }

  public static int Round(float f) {
    int ret = PInvoke.Round__SWIG_0(f);
    return ret;
  }

  public static long Round(double f) {
    long ret = PInvoke.Round__SWIG_1(f);
    return ret;
  }

  public static int Floor(float f) {
    int ret = PInvoke.Floor__SWIG_0(f);
    return ret;
  }

  public static long Floor(double f) {
    long ret = PInvoke.Floor__SWIG_1(f);
    return ret;
  }

  public static int Ceil(float f) {
    int ret = PInvoke.Ceil__SWIG_0(f);
    return ret;
  }

  public static long Ceil(double f) {
    long ret = PInvoke.Ceil__SWIG_1(f);
    return ret;
  }

  public static float Sin(float a) {
    float ret = PInvoke.Sin__SWIG_0(a);
    return ret;
  }

  public static float Cos(float a) {
    float ret = PInvoke.Cos__SWIG_0(a);
    return ret;
  }

  public static float Tan(float a) {
    float ret = PInvoke.Tan__SWIG_0(a);
    return ret;
  }

  public static float ASin(float a) {
    float ret = PInvoke.ASin__SWIG_0(a);
    return ret;
  }

  public static float ACos(float a) {
    float ret = PInvoke.ACos__SWIG_0(a);
    return ret;
  }

  public static float ATan(float a) {
    float ret = PInvoke.ATan__SWIG_0(a);
    return ret;
  }

  public static float ATan(float y, float x) {
    float ret = PInvoke.ATan__SWIG_1(y, x);
    return ret;
  }

  public static double Sin(double a) {
    double ret = PInvoke.Sin__SWIG_1(a);
    return ret;
  }

  public static double Cos(double a) {
    double ret = PInvoke.Cos__SWIG_1(a);
    return ret;
  }

  public static double Tan(double a) {
    double ret = PInvoke.Tan__SWIG_1(a);
    return ret;
  }

  public static double ASin(double a) {
    double ret = PInvoke.ASin__SWIG_1(a);
    return ret;
  }

  public static double ACos(double a) {
    double ret = PInvoke.ACos__SWIG_1(a);
    return ret;
  }

  public static double ATan(double a) {
    double ret = PInvoke.ATan__SWIG_2(a);
    return ret;
  }

  public static double ATan(double y, double x) {
    double ret = PInvoke.ATan__SWIG_3(y, x);
    return ret;
  }

  public static float Min(float a, float b) {
    float ret = PInvoke.Min__SWIG_0(a, b);
    return ret;
  }

  public static float Max(float a, float b) {
    float ret = PInvoke.Max__SWIG_0(a, b);
    return ret;
  }

  public static int Min(int a, int b) {
    int ret = PInvoke.Min__SWIG_1(a, b);
    return ret;
  }

  public static int Max(int a, int b) {
    int ret = PInvoke.Max__SWIG_1(a, b);
    return ret;
  }

  public static double Min(double a, double b) {
    double ret = PInvoke.Min__SWIG_2(a, b);
    return ret;
  }

  public static double Max(double a, double b) {
    double ret = PInvoke.Max__SWIG_2(a, b);
    return ret;
  }

  public static float Clamp(float a, float minvalue, float maxvalue) {
    float ret = PInvoke.Clamp__SWIG_0(a, minvalue, maxvalue);
    return ret;
  }

  public static int Clamp(int a, int minvalue, int maxvalue) {
    int ret = PInvoke.Clamp__SWIG_1(a, minvalue, maxvalue);
    return ret;
  }

  public static double Clamp(double a, double minvalue, double maxvalue) {
    double ret = PInvoke.Clamp__SWIG_2(a, minvalue, maxvalue);
    return ret;
  }

  public static float Degrees(float radians) {
    float ret = PInvoke.Degrees__SWIG_0(radians);
    return ret;
  }

  public static float Radians(float degrees) {
    float ret = PInvoke.Radians__SWIG_0(degrees);
    return ret;
  }

  public static double Degrees(double radians) {
    double ret = PInvoke.Degrees__SWIG_1(radians);
    return ret;
  }

  public static double Radians(double degrees) {
    double ret = PInvoke.Radians__SWIG_1(degrees);
    return ret;
  }

  public static float Mix(float start, float stop, float amount) {
    float ret = PInvoke.Mix(start, stop, amount);
    return ret;
  }

  public static float Log2(float num) {
    float ret = PInvoke.Log2(num);
    return ret;
  }

  public static float DeltaAngle(float angle0, float angle1) {
    float ret = PInvoke.DeltaAngle(angle0, angle1);
    return ret;
  }

  public static float MoveAngle(float angle0, float angle1, float increment) {
    float ret = PInvoke.MoveAngle(angle0, angle1, increment);
    return ret;
  }

  public static int Pow2(int f) {
    int ret = PInvoke.Pow2(f);
    return ret;
  }

  public static float Sign(float f) {
    float ret = PInvoke.Sign(f);
    return ret;
  }

  public static float Random(float max) {
    float ret = PInvoke.Random__SWIG_0(max);
    return ret;
  }

  public static float Random() {
    float ret = PInvoke.Random__SWIG_1();
    return ret;
  }

  public static float Random(float min, float max) {
    float ret = PInvoke.Random__SWIG_2(min, max);
    return ret;
  }

  public static float MoveValue(float newvalue, float oldvalue, float increments) {
    float ret = PInvoke.MoveValue(newvalue, oldvalue, increments);
    return ret;
  }

  public static float CurveValue(float target, float current, float smoothness) {
    float ret = PInvoke.CurveValue__SWIG_0(target, current, smoothness);
    return ret;
  }

  public static double CurveValue(double target, double current, double smoothness) {
    double ret = PInvoke.CurveValue__SWIG_1(target, current, smoothness);
    return ret;
  }

  public static float CurveAngle(float target, float current, float smoothness) {
    float ret = PInvoke.CurveAngle__SWIG_0(target, current, smoothness);
    return ret;
  }

  public static double CurveAngle(double target, double current, double smoothness) {
    double ret = PInvoke.CurveAngle__SWIG_1(target, current, smoothness);
    return ret;
  }

  public static double Mod(double num, double div) {
    double ret = PInvoke.Mod(num, div);
    return ret;
  }

  public static Vec3 Min(Vec3 v0, Vec3 v1) {
    Vec3 ret = new Vec3(PInvoke.Min__SWIG_3(Vec3.getCPtr(v0), Vec3.getCPtr(v1)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vec3 Max(Vec3 v0, Vec3 v1) {
    Vec3 ret = new Vec3(PInvoke.Max__SWIG_3(Vec3.getCPtr(v0), Vec3.getCPtr(v1)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SeedRandom(int seed) {
    PInvoke.SeedRandom(seed);
  }

  public static int rnd_state {
    set {
      PInvoke.rnd_state_set(value);
    } 
    get {
      int ret = PInvoke.rnd_state_get();
      return ret;
    } 
  }

  private static bool LessThan(Vec3 v0, Vec3 v1) {
    bool ret = PInvoke.LessThan__SWIG_0(Vec3.getCPtr(v0), Vec3.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool GreaterThan(Vec3 v0, Vec3 v1) {
    bool ret = PInvoke.GreaterThan__SWIG_0(Vec3.getCPtr(v0), Vec3.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool LessThan(Vec4 v0, Vec4 v1) {
    bool ret = PInvoke.LessThan__SWIG_1(Vec4.getCPtr(v0), Vec4.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool GreaterThan(Vec4 v0, Vec4 v1) {
    bool ret = PInvoke.GreaterThan__SWIG_1(Vec4.getCPtr(v0), Vec4.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool LessThan(iVec2 v0, iVec2 v1) {
    bool ret = PInvoke.LessThan__SWIG_2(iVec2.getCPtr(v0), iVec2.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool GreaterThan(iVec2 v0, iVec2 v1) {
    bool ret = PInvoke.GreaterThan__SWIG_2(iVec2.getCPtr(v0), iVec2.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool LessThan(iVec3 v0, iVec3 v1) {
    bool ret = PInvoke.LessThan__SWIG_3(iVec3.getCPtr(v0), iVec3.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool GreaterThan(iVec3 v0, iVec3 v1) {
    bool ret = PInvoke.GreaterThan__SWIG_3(iVec3.getCPtr(v0), iVec3.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool LessThan(iVec4 v0, iVec4 v1) {
    bool ret = PInvoke.LessThan__SWIG_4(iVec4.getCPtr(v0), iVec4.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static bool GreaterThan(iVec4 v0, iVec4 v1) {
    bool ret = PInvoke.GreaterThan__SWIG_4(iVec4.getCPtr(v0), iVec4.getCPtr(v1));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong Dec(String hex) {
    ulong ret = PInvoke.Dec(String.getCPtr(hex));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static String Hex(ulong i) {
    String ret = new String(PInvoke.Hex(i), true);
    return ret;
  }

  private static WString Plus(string s1, WString s2) {
    WString ret = new WString(PInvoke.Plus(s1, WString.getCPtr(s2)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void JSONSetString(JSONWrapper j3, WString s) {
    PInvoke.JSONSetString(JSONWrapper.getCPtr(j3), WString.getCPtr(s));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static WString JSONGetString(JSONWrapper j3) {
    WString ret = new WString(PInvoke.JSONGetString(JSONWrapper.getCPtr(j3)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorDisplay GetDisplays() {
    VectorDisplay ret = new VectorDisplay(PInvoke.GetDisplays(), true);
    return ret;
  }

  public static Display GetDisplayAtCoord(int x, int y) {
    global::System.IntPtr cPtr = PInvoke.GetDisplayAtCoord(x, y);
    Display ret = (cPtr == global::System.IntPtr.Zero) ? null : new Display(cPtr, true);
    return ret;
  }

  public static IDSystem CreateIDSystem() {
    global::System.IntPtr cPtr = PInvoke.CreateIDSystem();
    IDSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDSystem(cPtr, true);
    return ret;
  }

  public static int GetVersion() {
    int ret = PInvoke.GetVersion();
    return ret;
  }

  public static Object DebugObject1 {
    set {
      PInvoke.DebugObject1_set(Object.getCPtr(value));
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.DebugObject1_get();
      Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Object DebugObject2 {
    set {
      PInvoke.DebugObject2_set(Object.getCPtr(value));
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.DebugObject2_get();
      Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Object DebugObject3 {
    set {
      PInvoke.DebugObject3_set(Object.getCPtr(value));
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.DebugObject3_get();
      Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Object DebugObject4 {
    set {
      PInvoke.DebugObject4_set(Object.getCPtr(value));
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = PInvoke.DebugObject4_get();
      Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, true);
      if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static JSONWrapper LoadJSON(WString path) {
    JSONWrapper ret = new JSONWrapper(PInvoke.LoadJSON__SWIG_0(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static JSONWrapper LoadJSON(Stream stream) {
    JSONWrapper ret = new JSONWrapper(PInvoke.LoadJSON__SWIG_1(Stream.getCPtr(stream)), true);
    return ret;
  }

  public static bool SaveJSON(JSONWrapper j3, WString path) {
    bool ret = PInvoke.SaveJSON__SWIG_0(JSONWrapper.getCPtr(j3), WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveJSON(JSONWrapper j3, Stream stream) {
    bool ret = PInvoke.SaveJSON__SWIG_1(JSONWrapper.getCPtr(j3), Stream.getCPtr(stream));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static JSONWrapper ParseCommandLine(int argc, string[] argv) {
    JSONWrapper ret = new JSONWrapper(PInvoke.ParseCommandLine(argc, argv), true);
    return ret;
  }

  public static String Input(string message) {
    String ret = new String(PInvoke.Input__SWIG_0(message), true);
    return ret;
  }

  public static String Input(String message) {
    String ret = new String(PInvoke.Input__SWIG_1(String.getCPtr(message)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString Input(WString message) {
    WString ret = new WString(PInvoke.Input__SWIG_2(WString.getCPtr(message)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString GetProperty(WString key, WString defaultvalue) {
    WString ret = new WString(PInvoke.GetProperty__SWIG_0(WString.getCPtr(key), WString.getCPtr(defaultvalue)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString GetProperty(WString key) {
    WString ret = new WString(PInvoke.GetProperty__SWIG_1(WString.getCPtr(key)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetProperty(string key, string defaultvalue) {
    string ret = PInvoke.GetProperty__SWIG_2(key, defaultvalue);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetProperty(string key) {
    string ret = PInvoke.GetProperty__SWIG_3(key);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetProperty(string key, string value) {
    PInvoke.SetProperty__SWIG_0(key, value);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void SetProperty(WString key, WString value) {
    PInvoke.SetProperty__SWIG_1(WString.getCPtr(key), WString.getCPtr(value));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void SetLogMode(bool mode) {
    PInvoke.SetLogMode(mode);
  }

  public static void Notify(WString message, WString title, bool serious) {
    PInvoke.Notify__SWIG_0(WString.getCPtr(message), WString.getCPtr(title), serious);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Notify(WString message, WString title) {
    PInvoke.Notify__SWIG_1(WString.getCPtr(message), WString.getCPtr(title));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Notify(WString message) {
    PInvoke.Notify__SWIG_2(WString.getCPtr(message));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static int Confirm(WString message, WString title, bool serious) {
    int ret = PInvoke.Confirm__SWIG_0(WString.getCPtr(message), WString.getCPtr(title), serious);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int Confirm(WString message, WString title) {
    int ret = PInvoke.Confirm__SWIG_1(WString.getCPtr(message), WString.getCPtr(title));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int Confirm(WString message) {
    int ret = PInvoke.Confirm__SWIG_2(WString.getCPtr(message));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int Proceed(WString message, WString title, bool serious) {
    int ret = PInvoke.Proceed__SWIG_0(WString.getCPtr(message), WString.getCPtr(title), serious);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int Proceed(WString message, WString title) {
    int ret = PInvoke.Proceed__SWIG_1(WString.getCPtr(message), WString.getCPtr(title));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int Proceed(WString message) {
    int ret = PInvoke.Proceed__SWIG_2(WString.getCPtr(message));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RequestColor(int r, int g, int b) {
    int ret = PInvoke.RequestColor(r, g, b);
    return ret;
  }

  public static WString RequestDir(WString title, WString dir) {
    WString ret = new WString(PInvoke.RequestDir__SWIG_0(WString.getCPtr(title), WString.getCPtr(dir)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RequestDir(WString title) {
    WString ret = new WString(PInvoke.RequestDir__SWIG_1(WString.getCPtr(title)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RequestDir() {
    WString ret = new WString(PInvoke.RequestDir__SWIG_2(), true);
    return ret;
  }

  public static WString RequestFile(WString title, WString file, WString filetypes, int defaulttype, bool save) {
    WString ret = new WString(PInvoke.RequestFile__SWIG_0(WString.getCPtr(title), WString.getCPtr(file), WString.getCPtr(filetypes), defaulttype, save), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RequestFile(WString title, WString file, WString filetypes, int defaulttype) {
    WString ret = new WString(PInvoke.RequestFile__SWIG_1(WString.getCPtr(title), WString.getCPtr(file), WString.getCPtr(filetypes), defaulttype), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RequestFile(WString title, WString file, WString filetypes) {
    WString ret = new WString(PInvoke.RequestFile__SWIG_2(WString.getCPtr(title), WString.getCPtr(file), WString.getCPtr(filetypes)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RequestFile(WString title, WString file) {
    WString ret = new WString(PInvoke.RequestFile__SWIG_3(WString.getCPtr(title), WString.getCPtr(file)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RequestFile(WString title) {
    WString ret = new WString(PInvoke.RequestFile__SWIG_4(WString.getCPtr(title)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RequestFile() {
    WString ret = new WString(PInvoke.RequestFile__SWIG_5(), true);
    return ret;
  }

  public static void SetClipboardText(String text) {
    PInvoke.SetClipboardText__SWIG_0(String.getCPtr(text));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void SetClipboardText(WString text) {
    PInvoke.SetClipboardText__SWIG_1(WString.getCPtr(text));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static WString GetClipboardText() {
    WString ret = new WString(PInvoke.GetClipboardText(), true);
    return ret;
  }

  public static void RuntimeError(WString s) {
    PInvoke.RuntimeError(WString.getCPtr(s));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Warn(WString s) {
    PInvoke.Warn(WString.getCPtr(s));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Assert(bool condition) {
    PInvoke.Assert__SWIG_0(condition);
  }

  public static void Assert(bool condition, WString s) {
    PInvoke.Assert__SWIG_1(condition, WString.getCPtr(s));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Assert(Object o) {
    PInvoke.Assert__SWIG_2(Object.getCPtr(o));
  }

  public static void Assert(Object o, WString s) {
    PInvoke.Assert__SWIG_3(Object.getCPtr(o), WString.getCPtr(s));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static ulong Millisecs() {
    ulong ret = PInvoke.Millisecs();
    return ret;
  }

  public static void Sleep(int milliseconds) {
    PInvoke.Sleep(milliseconds);
  }

  public static ulong GetMemoryUsage() {
    ulong ret = PInvoke.GetMemoryUsage();
    return ret;
  }

  public static String CreateUUID() {
    String ret = new String(PInvoke.CreateUUID(), true);
    return ret;
  }

  public static String Chr(byte c) {
    String ret = new String(PInvoke.Chr(c), true);
    return ret;
  }

  public static byte Asc(string s) {
    byte ret = PInvoke.Asc__SWIG_0(s);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString XOR(WString s, WString key) {
    WString ret = new WString(PInvoke.XOR(WString.getCPtr(s), WString.getCPtr(key)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString WChr(char c) {
    WString ret = new WString(PInvoke.WChr(c), true);
    return ret;
  }

  public static char Asc(WString s) {
    char ret = PInvoke.Asc__SWIG_1(WString.getCPtr(s));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Print(string s, bool sendtodebugger) {
    PInvoke.Print__SWIG_0(s, sendtodebugger);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Print(string s) {
    PInvoke.Print__SWIG_1(s);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Print(WString s, bool sendtodebugger) {
    PInvoke.Print__SWIG_2(WString.getCPtr(s), sendtodebugger);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Print(WString s) {
    PInvoke.Print__SWIG_3(WString.getCPtr(s));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void Print(uint i) {
    PInvoke.Print__SWIG_4(i);
  }

  public static void Print(ulong i) {
    PInvoke.Print__SWIG_5(i);
  }

  public static void Print(int i) {
    PInvoke.Print__SWIG_6(i);
  }

  public static void Print(float i) {
    PInvoke.Print__SWIG_7(i);
  }

  public static void Print(double i) {
    PInvoke.Print__SWIG_8(i);
  }

  public static void Print(bool i) {
    PInvoke.Print__SWIG_9(i);
  }

  public static void Print(String s) {
    PInvoke.Print__SWIG_11(String.getCPtr(s));
  }

  public static void AddLogStream(Stream stream) {
    PInvoke.AddLogStream(Stream.getCPtr(stream));
  }

  public static bool FileHidden(WString path) {
    bool ret = PInvoke.FileHidden(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DownloadFile(WString src, WString dest) {
    bool ret = PInvoke.DownloadFile(WString.getCPtr(src), WString.getCPtr(dest));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool PathIsURL(WString path) {
    bool ret = PInvoke.PathIsURL(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorStdString LuaLoadDir(WString path, bool packages) {
    VectorStdString ret = new VectorStdString(PInvoke.LuaLoadDir(WString.getCPtr(path), packages), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorWString LoadDir(WString path, bool packages) {
    VectorWString ret = new VectorWString(PInvoke.LoadDir__SWIG_0(WString.getCPtr(path), packages), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorWString LoadDir(WString path) {
    VectorWString ret = new VectorWString(PInvoke.LoadDir__SWIG_1(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static String StripAll(string path) {
    String ret = new String(PInvoke.StripAll__SWIG_0(path), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString StripAll(WString path) {
    WString ret = new WString(PInvoke.StripAll__SWIG_1(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static String StripDir(string path) {
    String ret = new String(PInvoke.StripDir__SWIG_0(path), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString StripDir(WString path) {
    WString ret = new WString(PInvoke.StripDir__SWIG_1(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static String ExtractDir(string path) {
    String ret = new String(PInvoke.ExtractDir__SWIG_0(path), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString ExtractDir(WString path) {
    WString ret = new WString(PInvoke.ExtractDir__SWIG_1(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string StripExt(string path) {
    string ret = PInvoke.StripExt__SWIG_0(path);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString StripExt(WString path) {
    WString ret = new WString(PInvoke.StripExt__SWIG_1(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong FileTime(WString path) {
    ulong ret = PInvoke.FileTime(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FileType(WString path) {
    int ret = PInvoke.FileType(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static String ExtractExt(string path) {
    String ret = new String(PInvoke.ExtractExt__SWIG_0(path), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString ExtractExt(WString path) {
    WString ret = new WString(PInvoke.ExtractExt__SWIG_1(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString GetPath(UserPath name) {
    WString ret = new WString(PInvoke.GetPath((int)name), true);
    return ret;
  }

  public static WString CurrentDir() {
    WString ret = new WString(PInvoke.CurrentDir(), true);
    return ret;
  }

  public static WString AppDir() {
    WString ret = new WString(PInvoke.AppDir(), true);
    return ret;
  }

  public static bool ChangeDir(WString path) {
    bool ret = PInvoke.ChangeDir(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString RealPath(WString path) {
    WString ret = new WString(PInvoke.RealPath(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DeleteDir(WString path, bool recursive) {
    bool ret = PInvoke.DeleteDir__SWIG_0(WString.getCPtr(path), recursive);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DeleteDir(WString path) {
    bool ret = PInvoke.DeleteDir__SWIG_1(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CreateDir(WString path, bool recursive) {
    bool ret = PInvoke.CreateDir__SWIG_0(WString.getCPtr(path), recursive);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CreateDir(WString path) {
    bool ret = PInvoke.CreateDir__SWIG_1(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RenameDir(WString src, WString dst) {
    bool ret = PInvoke.RenameDir(WString.getCPtr(src), WString.getCPtr(dst));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString FixPath(WString path) {
    WString ret = new WString(PInvoke.FixPath(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString CasedPath(WString path) {
    WString ret = new WString(PInvoke.CasedPath(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString CasedFileName(WString path, WString file) {
    WString ret = new WString(PInvoke.CasedFileName(WString.getCPtr(path), WString.getCPtr(file)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ClearWebCache() {
    bool ret = PInvoke.ClearWebCache();
    return ret;
  }

  public static String LoadString(WString path) {
    String ret = new String(PInvoke.LoadString(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WString LoadWString(WString path) {
    WString ret = new WString(PInvoke.LoadWString(WString.getCPtr(path)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Stream ReadFile(WString path, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.ReadFile__SWIG_0(WString.getCPtr(path), (int)flags);
    Stream ret = (cPtr == global::System.IntPtr.Zero) ? null : new Stream(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Stream ReadFile(WString path) {
    global::System.IntPtr cPtr = PInvoke.ReadFile__SWIG_1(WString.getCPtr(path));
    Stream ret = (cPtr == global::System.IntPtr.Zero) ? null : new Stream(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RenameFile(WString src, WString dst) {
    bool ret = PInvoke.RenameFile(WString.getCPtr(src), WString.getCPtr(dst));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Stream WriteFile(WString path) {
    global::System.IntPtr cPtr = PInvoke.WriteFile(WString.getCPtr(path));
    Stream ret = (cPtr == global::System.IntPtr.Zero) ? null : new Stream(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Stream OpenFile(WString path) {
    global::System.IntPtr cPtr = PInvoke.OpenFile(WString.getCPtr(path));
    Stream ret = (cPtr == global::System.IntPtr.Zero) ? null : new Stream(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DeleteFile(WString path) {
    bool ret = PInvoke.DeleteFile(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CopyFile(WString src, WString dst) {
    bool ret = PInvoke.CopyFile(WString.getCPtr(src), WString.getCPtr(dst));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool OpenDir(WString path) {
    bool ret = PInvoke.OpenDir(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RunFile(WString path, WString args) {
    bool ret = PInvoke.RunFile__SWIG_0(WString.getCPtr(path), WString.getCPtr(args));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RunFile(WString path) {
    bool ret = PInvoke.RunFile__SWIG_1(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CreateFile(WString path) {
    bool ret = PInvoke.CreateFile(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FileSize(WString path) {
    long ret = PInvoke.FileSize(WString.getCPtr(path));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EventID AllocEventID() {
    EventID ret = (EventID)PInvoke.AllocEventID();
    return ret;
  }

  public static bool PeekEvent() {
    bool ret = PInvoke.PeekEvent();
    return ret;
  }

  public static Event WaitEvent() {
    Event ret = new Event(PInvoke.WaitEvent(), true);
    return ret;
  }

  public static void EmitEvent(Event e, bool queue) {
    PInvoke.EmitEvent__SWIG_0(Event.getCPtr(e), queue);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void EmitEvent(Event e) {
    PInvoke.EmitEvent__SWIG_1(Event.getCPtr(e));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
  }

  public static void EmitEvent(int id, Object source, int data, int x, int y, int width, int height, Object extra) {
    PInvoke.EmitEvent__SWIG_2(id, Object.getCPtr(source), data, x, y, width, height, Object.getCPtr(extra));
  }

  public static void EmitEvent(int id, Object source, int data, int x, int y, int width, int height) {
    PInvoke.EmitEvent__SWIG_3(id, Object.getCPtr(source), data, x, y, width, height);
  }

  public static void EmitEvent(int id, Object source, int data, int x, int y, int width) {
    PInvoke.EmitEvent__SWIG_4(id, Object.getCPtr(source), data, x, y, width);
  }

  public static void EmitEvent(int id, Object source, int data, int x, int y) {
    PInvoke.EmitEvent__SWIG_5(id, Object.getCPtr(source), data, x, y);
  }

  public static void EmitEvent(int id, Object source, int data, int x) {
    PInvoke.EmitEvent__SWIG_6(id, Object.getCPtr(source), data, x);
  }

  public static void EmitEvent(int id, Object source, int data) {
    PInvoke.EmitEvent__SWIG_7(id, Object.getCPtr(source), data);
  }

  public static void EmitEvent(int id, Object source) {
    PInvoke.EmitEvent__SWIG_8(id, Object.getCPtr(source));
  }

  public static void EmitEvent(int id) {
    PInvoke.EmitEvent__SWIG_9(id);
  }

  public static Language LoadLanguage(WString path) {
    global::System.IntPtr cPtr = PInvoke.LoadLanguage__SWIG_0(WString.getCPtr(path));
    Language ret = (cPtr == global::System.IntPtr.Zero) ? null : new Language(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Language LoadLanguage(Stream stream) {
    global::System.IntPtr cPtr = PInvoke.LoadLanguage__SWIG_1(Stream.getCPtr(stream));
    Language ret = (cPtr == global::System.IntPtr.Zero) ? null : new Language(cPtr, true);
    return ret;
  }

  public static void SetLanguage(Language lang) {
    PInvoke.SetLanguage(Language.getCPtr(lang));
  }

  public static Language GetLanguage() {
    global::System.IntPtr cPtr = PInvoke.GetLanguage();
    Language ret = (cPtr == global::System.IntPtr.Zero) ? null : new Language(cPtr, true);
    return ret;
  }

  public static BufferStream CreateBufferStream(Buffer bank, string path) {
    global::System.IntPtr cPtr = PInvoke.CreateBufferStream__SWIG_0(Buffer.getCPtr(bank), path);
    BufferStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new BufferStream(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BufferStream CreateBufferStream(Buffer bank) {
    global::System.IntPtr cPtr = PInvoke.CreateBufferStream__SWIG_1(Buffer.getCPtr(bank));
    BufferStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new BufferStream(cPtr, true);
    return ret;
  }

  public static BufferStream CreateBufferStream() {
    global::System.IntPtr cPtr = PInvoke.CreateBufferStream__SWIG_2();
    BufferStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new BufferStream(cPtr, true);
    return ret;
  }

  public static FileSystemWatcher CreateFileSystemWatcher(WString path, bool recursive) {
    global::System.IntPtr cPtr = PInvoke.CreateFileSystemWatcher__SWIG_0(WString.getCPtr(path), recursive);
    FileSystemWatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new FileSystemWatcher(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FileSystemWatcher CreateFileSystemWatcher(WString path) {
    global::System.IntPtr cPtr = PInvoke.CreateFileSystemWatcher__SWIG_1(WString.getCPtr(path));
    FileSystemWatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new FileSystemWatcher(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Initialize() {
    PInvoke.Initialize();
  }

  public static void Shutdown() {
    PInvoke.Shutdown();
  }

  public static Clock CreateClock(int frequency) {
    global::System.IntPtr cPtr = PInvoke.CreateClock__SWIG_0(frequency);
    Clock ret = (cPtr == global::System.IntPtr.Zero) ? null : new Clock(cPtr, true);
    return ret;
  }

  public static Clock CreateClock() {
    global::System.IntPtr cPtr = PInvoke.CreateClock__SWIG_1();
    Clock ret = (cPtr == global::System.IntPtr.Zero) ? null : new Clock(cPtr, true);
    return ret;
  }

  public static Buffer LoadBuffer(WString path, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadBuffer__SWIG_0(WString.getCPtr(path), (int)flags);
    Buffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Buffer(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Buffer LoadBuffer(WString path) {
    global::System.IntPtr cPtr = PInvoke.LoadBuffer__SWIG_1(WString.getCPtr(path));
    Buffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Buffer(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Buffer CreateBuffer(ulong size) {
    global::System.IntPtr cPtr = PInvoke.CreateBuffer__SWIG_0(size);
    Buffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Buffer(cPtr, true);
    return ret;
  }

  public static Buffer CreateBuffer() {
    global::System.IntPtr cPtr = PInvoke.CreateBuffer__SWIG_1();
    Buffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Buffer(cPtr, true);
    return ret;
  }

  public static Buffer CreateStaticBuffer(System.IntPtr data, ulong size, Object extra) {
    global::System.IntPtr cPtr = PInvoke.CreateStaticBuffer__SWIG_0(data, size, Object.getCPtr(extra));
    Buffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Buffer(cPtr, true);
    return ret;
  }

  public static Buffer CreateStaticBuffer(System.IntPtr data, ulong size) {
    global::System.IntPtr cPtr = PInvoke.CreateStaticBuffer__SWIG_1(data, size);
    Buffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Buffer(cPtr, true);
    return ret;
  }

  public static Interface CreateInterface(Window window) {
    global::System.IntPtr cPtr = PInvoke.CreateInterface(Window.getCPtr(window));
    Interface ret = (cPtr == global::System.IntPtr.Zero) ? null : new Interface(cPtr, true);
    return ret;
  }

  private static PanelStyle BinaryOR(PanelStyle a, PanelStyle b) {
    PanelStyle ret = (PanelStyle)PInvoke.BinaryOR__SWIG_7((int)a, (int)b);
    return ret;
  }

  public static Panel CreatePanel(int x, int y, int width, int height, Widget parent, PanelStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreatePanel__SWIG_0(x, y, width, height, Widget.getCPtr(parent), (int)style);
    Panel ret = (cPtr == global::System.IntPtr.Zero) ? null : new Panel(cPtr, true);
    return ret;
  }

  public static Panel CreatePanel(int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreatePanel__SWIG_1(x, y, width, height, Widget.getCPtr(parent));
    Panel ret = (cPtr == global::System.IntPtr.Zero) ? null : new Panel(cPtr, true);
    return ret;
  }

  private static SliderStyle BinaryOR(SliderStyle a, SliderStyle b) {
    SliderStyle ret = (SliderStyle)PInvoke.BinaryOR__SWIG_8((int)a, (int)b);
    return ret;
  }

  public static Slider CreateSlider(int x, int y, int width, int height, Widget parent, SliderStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateSlider__SWIG_0(x, y, width, height, Widget.getCPtr(parent), (int)style);
    Slider ret = (cPtr == global::System.IntPtr.Zero) ? null : new Slider(cPtr, true);
    return ret;
  }

  public static Slider CreateSlider(int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreateSlider__SWIG_1(x, y, width, height, Widget.getCPtr(parent));
    Slider ret = (cPtr == global::System.IntPtr.Zero) ? null : new Slider(cPtr, true);
    return ret;
  }

  private static LabelStyle BinaryOR(LabelStyle a, LabelStyle b) {
    LabelStyle ret = (LabelStyle)PInvoke.BinaryOR__SWIG_9((int)a, (int)b);
    return ret;
  }

  public static Widget CreateLabel(WString text, int x, int y, int width, int height, Widget parent, LabelStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateLabel__SWIG_0(WString.getCPtr(text), x, y, width, height, Widget.getCPtr(parent), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Widget CreateLabel(WString text, int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreateLabel__SWIG_1(WString.getCPtr(text), x, y, width, height, Widget.getCPtr(parent));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static ButtonStyle BinaryOR(ButtonStyle a, ButtonStyle b) {
    ButtonStyle ret = (ButtonStyle)PInvoke.BinaryOR__SWIG_10((int)a, (int)b);
    return ret;
  }

  public static Widget CreateButton(WString text, int x, int y, int width, int height, Widget parent, ButtonStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateButton__SWIG_0(WString.getCPtr(text), x, y, width, height, Widget.getCPtr(parent), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Widget CreateButton(WString text, int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreateButton__SWIG_1(WString.getCPtr(text), x, y, width, height, Widget.getCPtr(parent));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  private static TextFieldStyle BinaryOR(TextFieldStyle a, TextFieldStyle b) {
    TextFieldStyle ret = (TextFieldStyle)PInvoke.BinaryOR__SWIG_11((int)a, (int)b);
    return ret;
  }

  public static Widget CreateTextField(int x, int y, int width, int height, Widget ui, TextFieldStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateTextField__SWIG_0(x, y, width, height, Widget.getCPtr(ui), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateTextField(int x, int y, int width, int height, Widget ui) {
    global::System.IntPtr cPtr = PInvoke.CreateTextField__SWIG_1(x, y, width, height, Widget.getCPtr(ui));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  private static TreeViewStyle BinaryOR(TreeViewStyle a, TreeViewStyle b) {
    TreeViewStyle ret = (TreeViewStyle)PInvoke.BinaryOR__SWIG_12((int)a, (int)b);
    return ret;
  }

  public static TreeView CreateTreeView(int x, int y, int width, int height, Widget parent, TreeViewStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateTreeView__SWIG_0(x, y, width, height, Widget.getCPtr(parent), (int)style);
    TreeView ret = (cPtr == global::System.IntPtr.Zero) ? null : new TreeView(cPtr, true);
    return ret;
  }

  public static TreeView CreateTreeView(int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreateTreeView__SWIG_1(x, y, width, height, Widget.getCPtr(parent));
    TreeView ret = (cPtr == global::System.IntPtr.Zero) ? null : new TreeView(cPtr, true);
    return ret;
  }

  public static Widget CreateTextArea(int x, int y, int width, int height, Widget ui, TextAreaStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateTextArea__SWIG_0(x, y, width, height, Widget.getCPtr(ui), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateTextArea(int x, int y, int width, int height, Widget ui) {
    global::System.IntPtr cPtr = PInvoke.CreateTextArea__SWIG_1(x, y, width, height, Widget.getCPtr(ui));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateTabber(int x, int y, int width, int height, Widget ui, TabberStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateTabber__SWIG_0(x, y, width, height, Widget.getCPtr(ui), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateTabber(int x, int y, int width, int height, Widget ui) {
    global::System.IntPtr cPtr = PInvoke.CreateTabber__SWIG_1(x, y, width, height, Widget.getCPtr(ui));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateListBox(int x, int y, int width, int height, Widget parent, ListBoxStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateListBox__SWIG_0(x, y, width, height, Widget.getCPtr(parent), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateListBox(int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreateListBox__SWIG_1(x, y, width, height, Widget.getCPtr(parent));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateProgressBar(int x, int y, int width, int height, Widget parent, ProgressBarStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateProgressBar__SWIG_0(x, y, width, height, Widget.getCPtr(parent), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateProgressBar(int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreateProgressBar__SWIG_1(x, y, width, height, Widget.getCPtr(parent));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateComboBox(int x, int y, int width, int height, Widget parent) {
    global::System.IntPtr cPtr = PInvoke.CreateComboBox(x, y, width, height, Widget.getCPtr(parent));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    return ret;
  }

  public static Widget CreateMenu(WString text, Widget ui, MenuStyle style) {
    global::System.IntPtr cPtr = PInvoke.CreateMenu__SWIG_0(WString.getCPtr(text), Widget.getCPtr(ui), (int)style);
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Widget CreateMenu(WString text, Widget ui) {
    global::System.IntPtr cPtr = PInvoke.CreateMenu__SWIG_1(WString.getCPtr(text), Widget.getCPtr(ui));
    Widget ret = (cPtr == global::System.IntPtr.Zero) ? null : new Widget(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static iVec2 TransformCoord(iVec2 point, Window src, Window dest) {
    iVec2 ret = new iVec2(PInvoke.TransformCoord__SWIG_0(iVec2.getCPtr(point), Window.getCPtr(src), Window.getCPtr(dest)), true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static iVec2 TransformCoord(int x, int y, Window src, Window dest) {
    iVec2 ret = new iVec2(PInvoke.TransformCoord__SWIG_1(x, y, Window.getCPtr(src), Window.getCPtr(dest)), true);
    return ret;
  }

  public static Window ActiveWindow() {
    global::System.IntPtr cPtr = PInvoke.ActiveWindow();
    Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new Window(cPtr, true);
    return ret;
  }

  public static Window CreateWindow(WString title, int x, int y, int width, int height, Display display, WindowStyles style) {
    global::System.IntPtr cPtr = PInvoke.CreateWindow__SWIG_0(WString.getCPtr(title), x, y, width, height, Display.getCPtr(display), (int)style);
    Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new Window(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Window CreateWindow(WString title, int x, int y, int width, int height, Display display) {
    global::System.IntPtr cPtr = PInvoke.CreateWindow__SWIG_1(WString.getCPtr(title), x, y, width, height, Display.getCPtr(display));
    Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new Window(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Window CreateWindow(WString title, int x, int y, int width, int height) {
    global::System.IntPtr cPtr = PInvoke.CreateWindow__SWIG_2(WString.getCPtr(title), x, y, width, height);
    Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new Window(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Window CreateWindow(WString title, int x, int y, int width, int height, Window parent, WindowStyles style) {
    global::System.IntPtr cPtr = PInvoke.CreateWindow__SWIG_3(WString.getCPtr(title), x, y, width, height, Window.getCPtr(parent), (int)style);
    Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new Window(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Window CreateWindow(WString title, int x, int y, int width, int height, Window parent) {
    global::System.IntPtr cPtr = PInvoke.CreateWindow__SWIG_4(WString.getCPtr(title), x, y, width, height, Window.getCPtr(parent));
    Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new Window(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Timer CreateTimer(int frequency) {
    global::System.IntPtr cPtr = PInvoke.CreateTimer(frequency);
    Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Timer(cPtr, true);
    return ret;
  }

  public static Process CreateProcess(WString path, WString commandline) {
    global::System.IntPtr cPtr = PInvoke.CreateProcess__SWIG_0(WString.getCPtr(path), WString.getCPtr(commandline));
    Process ret = (cPtr == global::System.IntPtr.Zero) ? null : new Process(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Process CreateProcess(WString path) {
    global::System.IntPtr cPtr = PInvoke.CreateProcess__SWIG_1(WString.getCPtr(path));
    Process ret = (cPtr == global::System.IntPtr.Zero) ? null : new Process(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StreamBuffer CreateStreamBuffer(Stream stream, ulong pos, ulong size) {
    global::System.IntPtr cPtr = PInvoke.CreateStreamBuffer(Stream.getCPtr(stream), pos, size);
    StreamBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new StreamBuffer(cPtr, true);
    return ret;
  }

  public static int MaxThreads() {
    int ret = PInvoke.MaxThreads();
    return ret;
  }

  public static Mutex CreateMutex() {
    global::System.IntPtr cPtr = PInvoke.CreateMutex();
    Mutex ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mutex(cPtr, true);
    return ret;
  }

  public static Asset FindCachedAsset(WString path) {
    global::System.IntPtr cPtr = PInvoke.FindCachedAsset(WString.getCPtr(path));
    Asset ret = (cPtr == global::System.IntPtr.Zero) ? null : new Asset(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Plugin LoadPlugin(WString path, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadPlugin__SWIG_0(WString.getCPtr(path), (int)flags);
    Plugin ret = (cPtr == global::System.IntPtr.Zero) ? null : new Plugin(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Plugin LoadPlugin(WString path) {
    global::System.IntPtr cPtr = PInvoke.LoadPlugin__SWIG_1(WString.getCPtr(path));
    Plugin ret = (cPtr == global::System.IntPtr.Zero) ? null : new Plugin(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Font LoadFont(Stream stream, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadFont__SWIG_0(Stream.getCPtr(stream), (int)flags);
    Font ret = (cPtr == global::System.IntPtr.Zero) ? null : new Font(cPtr, true);
    return ret;
  }

  public static Font LoadFont(Stream stream) {
    global::System.IntPtr cPtr = PInvoke.LoadFont__SWIG_1(Stream.getCPtr(stream));
    Font ret = (cPtr == global::System.IntPtr.Zero) ? null : new Font(cPtr, true);
    return ret;
  }

  public static Font LoadFont(WString path, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadFont__SWIG_2(WString.getCPtr(path), (int)flags);
    Font ret = (cPtr == global::System.IntPtr.Zero) ? null : new Font(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Font LoadFont(WString path) {
    global::System.IntPtr cPtr = PInvoke.LoadFont__SWIG_3(WString.getCPtr(path));
    Font ret = (cPtr == global::System.IntPtr.Zero) ? null : new Font(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Package LoadPackage(WString path, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadPackage__SWIG_0(WString.getCPtr(path), (int)flags);
    Package ret = (cPtr == global::System.IntPtr.Zero) ? null : new Package(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Package LoadPackage(WString path) {
    global::System.IntPtr cPtr = PInvoke.LoadPackage__SWIG_1(WString.getCPtr(path));
    Package ret = (cPtr == global::System.IntPtr.Zero) ? null : new Package(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveTexture(WString filename, TextureType type, VectorPixmap mipchain, int layers, SaveFlags flags) {
    bool ret = PInvoke.SaveTexture__SWIG_0(WString.getCPtr(filename), (int)type, VectorPixmap.getCPtr(mipchain), layers, (int)flags);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveTexture(WString filename, TextureType type, VectorPixmap mipchain, int layers) {
    bool ret = PInvoke.SaveTexture__SWIG_1(WString.getCPtr(filename), (int)type, VectorPixmap.getCPtr(mipchain), layers);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveTexture(WString filename, TextureType type, VectorPixmap mipchain) {
    bool ret = PInvoke.SaveTexture__SWIG_2(WString.getCPtr(filename), (int)type, VectorPixmap.getCPtr(mipchain));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveTexture(WString filename, TextureType type) {
    bool ret = PInvoke.SaveTexture__SWIG_3(WString.getCPtr(filename), (int)type);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveTexture(WString filename, TextureType type, Pixmap pixmap, int layers, SaveFlags flags) {
    bool ret = PInvoke.SaveTexture__SWIG_4(WString.getCPtr(filename), (int)type, Pixmap.getCPtr(pixmap), layers, (int)flags);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveTexture(WString filename, TextureType type, Pixmap pixmap, int layers) {
    bool ret = PInvoke.SaveTexture__SWIG_5(WString.getCPtr(filename), (int)type, Pixmap.getCPtr(pixmap), layers);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveTexture(WString filename, TextureType type, Pixmap pixmap) {
    bool ret = PInvoke.SaveTexture__SWIG_6(WString.getCPtr(filename), (int)type, Pixmap.getCPtr(pixmap));
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Pixmap CreatePixmap(int width, int height, TextureFormat format, Buffer data) {
    global::System.IntPtr cPtr = PInvoke.CreatePixmap__SWIG_0(width, height, (int)format, Buffer.getCPtr(data));
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    return ret;
  }

  public static Pixmap CreatePixmap(int width, int height, TextureFormat format) {
    global::System.IntPtr cPtr = PInvoke.CreatePixmap__SWIG_1(width, height, (int)format);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    return ret;
  }

  public static Pixmap CreatePixmap(int width, int height) {
    global::System.IntPtr cPtr = PInvoke.CreatePixmap__SWIG_2(width, height);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    return ret;
  }

  public static Pixmap LoadPixmap(WString path, int miplevel, int face, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_0(WString.getCPtr(path), miplevel, face, (int)flags);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Pixmap LoadPixmap(WString path, int miplevel, int face) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_1(WString.getCPtr(path), miplevel, face);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Pixmap LoadPixmap(WString path, int miplevel) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_2(WString.getCPtr(path), miplevel);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Pixmap LoadPixmap(WString path) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_3(WString.getCPtr(path));
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Pixmap LoadPixmap(Stream stream, int miplevel, int face, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_4(Stream.getCPtr(stream), miplevel, face, (int)flags);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    return ret;
  }

  public static Pixmap LoadPixmap(Stream stream, int miplevel, int face) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_5(Stream.getCPtr(stream), miplevel, face);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    return ret;
  }

  public static Pixmap LoadPixmap(Stream stream, int miplevel) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_6(Stream.getCPtr(stream), miplevel);
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    return ret;
  }

  public static Pixmap LoadPixmap(Stream stream) {
    global::System.IntPtr cPtr = PInvoke.LoadPixmap__SWIG_7(Stream.getCPtr(stream));
    Pixmap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pixmap(cPtr, true);
    return ret;
  }

  public static Icon LoadIcon(WString path, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadIcon__SWIG_0(WString.getCPtr(path), (int)flags);
    Icon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Icon(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Icon LoadIcon(WString path) {
    global::System.IntPtr cPtr = PInvoke.LoadIcon__SWIG_1(WString.getCPtr(path));
    Icon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Icon(cPtr, true);
    if (PInvoke.SWIGPendingException.Pending) throw PInvoke.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Icon LoadIcon(Stream stream, LoadFlags flags) {
    global::System.IntPtr cPtr = PInvoke.LoadIcon__SWIG_2(Stream.getCPtr(stream), (int)flags);
    Icon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Icon(cPtr, true);
    return ret;
  }

  public static Icon LoadIcon(Stream stream) {
    global::System.IntPtr cPtr = PInvoke.LoadIcon__SWIG_3(Stream.getCPtr(stream));
    Icon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Icon(cPtr, true);
    return ret;
  }

  public static void ListenEvent(EventID id, Object source, FunctionDelegate callback) {
    PInvoke.ListenEvent((int)id, Object.getCPtr(source), FunctionDelegate.getCPtr(callback));
  }

  public static void ListenEvent_Internal(EventID id, Object source, ProcessEventHandlerDelegate callback, Object extra) {
    PInvoke.ListenEvent_Internal__SWIG_0((int)id, Object.getCPtr(source), callback, Object.getCPtr(extra));
  }

  public static void ListenEvent_Internal(EventID id, Object source, ProcessEventHandlerDelegate callback) {
    PInvoke.ListenEvent_Internal__SWIG_1((int)id, Object.getCPtr(source), callback);
  }

  public static Thread CreateThread_Internal(EntryPointHandlerDelegate entryPoint, Object o, bool start) {
    global::System.IntPtr cPtr = PInvoke.CreateThread_Internal__SWIG_0(entryPoint, Object.getCPtr(o), start);
    Thread ret = (cPtr == global::System.IntPtr.Zero) ? null : new Thread(cPtr, true);
    return ret;
  }

  public static Thread CreateThread_Internal(EntryPointHandlerDelegate entryPoint, Object o) {
    global::System.IntPtr cPtr = PInvoke.CreateThread_Internal__SWIG_1(entryPoint, Object.getCPtr(o));
    Thread ret = (cPtr == global::System.IntPtr.Zero) ? null : new Thread(cPtr, true);
    return ret;
  }

  public static Thread CreateThread_Internal(EntryPointHandlerDelegate entryPoint) {
    global::System.IntPtr cPtr = PInvoke.CreateThread_Internal__SWIG_2(entryPoint);
    Thread ret = (cPtr == global::System.IntPtr.Zero) ? null : new Thread(cPtr, true);
    return ret;
  }

  public static Thread CreateThread(FunctionDelegate instruction, bool start) {
    global::System.IntPtr cPtr = PInvoke.CreateThread__SWIG_0(FunctionDelegate.getCPtr(instruction), start);
    Thread ret = (cPtr == global::System.IntPtr.Zero) ? null : new Thread(cPtr, true);
    return ret;
  }

  public static Thread CreateThread(FunctionDelegate instruction) {
    global::System.IntPtr cPtr = PInvoke.CreateThread__SWIG_1(FunctionDelegate.getCPtr(instruction));
    Thread ret = (cPtr == global::System.IntPtr.Zero) ? null : new Thread(cPtr, true);
    return ret;
  }

  public static readonly int _ULTRA_ENGINE_VERSION = PInvoke._ULTRA_ENGINE_VERSION_get();
  public static readonly int _HAS_STD_BYTE = PInvoke._HAS_STD_BYTE_get();
  public static readonly int MAX_ANIMATION_THREADS = PInvoke.MAX_ANIMATION_THREADS_get();

  public static readonly int TEXT_MULTILINE = PInvoke.TEXT_MULTILINE_get();
  public static readonly int TEXT_WORDWRAP = PInvoke.TEXT_WORDWRAP_get();
  public static readonly int TEXT_SHADOW = PInvoke.TEXT_SHADOW_get();

  public static readonly double PI_OVER_180 = PInvoke.PI_OVER_180_get();
  public static readonly double PI_OVER_360 = PInvoke.PI_OVER_360_get();
  public static readonly double DEGTORAD = PInvoke.DEGTORAD_get();
  public static readonly double RADTODEG = PInvoke.RADTODEG_get();
  public static readonly int ICON_WARNING = PInvoke.ICON_WARNING_get();
  public static readonly int ICON_QUESTION = PInvoke.ICON_QUESTION_get();
  public static readonly int ICON_INFORMATION = PInvoke.ICON_INFORMATION_get();

  public static readonly int STREAM_READ = PInvoke.STREAM_READ_get();
  public static readonly int STREAM_WRITE = PInvoke.STREAM_WRITE_get();

  public static readonly int WINVER = PInvoke.WINVER_get();
  public static readonly int CORE_FONT_DEFAULT = PInvoke.CORE_FONT_DEFAULT_get();
  public static readonly int CORE_FONT_MENU = PInvoke.CORE_FONT_MENU_get();
  public static readonly int CORE_FONT_STATUS = PInvoke.CORE_FONT_STATUS_get();
  public static readonly int CORE_FONT_MESSAGE = PInvoke.CORE_FONT_MESSAGE_get();
}

}
