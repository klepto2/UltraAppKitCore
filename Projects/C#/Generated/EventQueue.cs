//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace UltraEngine {

public class EventQueue : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EventQueue(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EventQueue obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EventQueue() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PInvoke.delete_EventQueue(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool Peek() {
    bool ret = PInvoke.EventQueue_Peek();
    return ret;
  }

  public static Event Wait() {
    Event ret = new Event(PInvoke.EventQueue_Wait(), true);
    return ret;
  }

  public static void Flush() {
    PInvoke.EventQueue_Flush();
  }

  public static void Emit(int id, Object source, int data, int x, int y, int width, int height, Object extra, bool queue) {
    PInvoke.EventQueue_Emit__SWIG_0(id, Object.getCPtr(source), data, x, y, width, height, Object.getCPtr(extra), queue);
  }

  public static void Emit(int id, Object source, int data, int x, int y, int width, int height, Object extra) {
    PInvoke.EventQueue_Emit__SWIG_1(id, Object.getCPtr(source), data, x, y, width, height, Object.getCPtr(extra));
  }

  public static void Emit(int id, Object source, int data, int x, int y, int width, int height) {
    PInvoke.EventQueue_Emit__SWIG_2(id, Object.getCPtr(source), data, x, y, width, height);
  }

  public static void Emit(int id, Object source, int data, int x, int y, int width) {
    PInvoke.EventQueue_Emit__SWIG_3(id, Object.getCPtr(source), data, x, y, width);
  }

  public static void Emit(int id, Object source, int data, int x, int y) {
    PInvoke.EventQueue_Emit__SWIG_4(id, Object.getCPtr(source), data, x, y);
  }

  public static void Emit(int id, Object source, int data, int x) {
    PInvoke.EventQueue_Emit__SWIG_5(id, Object.getCPtr(source), data, x);
  }

  public static void Emit(int id, Object source, int data) {
    PInvoke.EventQueue_Emit__SWIG_6(id, Object.getCPtr(source), data);
  }

  public static void Emit(int id, Object source) {
    PInvoke.EventQueue_Emit__SWIG_7(id, Object.getCPtr(source));
  }

  public static void Emit(int id) {
    PInvoke.EventQueue_Emit__SWIG_8(id);
  }

  public static int MaxSize {
    get {
      int ret = PInvoke.EventQueue_MaxSize_get();
      return ret;
    } 
  }

  public EventQueue() : this(PInvoke.new_EventQueue(), true) {
  }

}

}
