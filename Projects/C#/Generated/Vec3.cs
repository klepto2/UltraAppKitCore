//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Vec3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vec3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec3() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UltraAppKitPINVOKE.delete_Vec3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float x {
    set {
      UltraAppKitPINVOKE.Vec3_x_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_x_get(swigCPtr);
      return ret;
    } 
  }

  public float r {
    set {
      UltraAppKitPINVOKE.Vec3_r_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_r_get(swigCPtr);
      return ret;
    } 
  }

  public float width {
    set {
      UltraAppKitPINVOKE.Vec3_width_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_width_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      UltraAppKitPINVOKE.Vec3_y_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_y_get(swigCPtr);
      return ret;
    } 
  }

  public float g {
    set {
      UltraAppKitPINVOKE.Vec3_g_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_g_get(swigCPtr);
      return ret;
    } 
  }

  public float height {
    set {
      UltraAppKitPINVOKE.Vec3_height_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_height_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      UltraAppKitPINVOKE.Vec3_z_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_z_get(swigCPtr);
      return ret;
    } 
  }

  public float b {
    set {
      UltraAppKitPINVOKE.Vec3_b_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_b_get(swigCPtr);
      return ret;
    } 
  }

  public float depth {
    set {
      UltraAppKitPINVOKE.Vec3_depth_set(swigCPtr, value);
    } 
    get {
      float ret = UltraAppKitPINVOKE.Vec3_depth_get(swigCPtr);
      return ret;
    } 
  }

  public Vec3() : this(UltraAppKitPINVOKE.new_Vec3__SWIG_0(), true) {
  }

  public Vec3(float x) : this(UltraAppKitPINVOKE.new_Vec3__SWIG_1(x), true) {
  }

  public Vec3(float x, float y) : this(UltraAppKitPINVOKE.new_Vec3__SWIG_2(x, y), true) {
  }

  public Vec3(float x, float y, float z) : this(UltraAppKitPINVOKE.new_Vec3__SWIG_3(x, y, z), true) {
  }

  public bool LessThan(Vec3 v) {
    bool ret = UltraAppKitPINVOKE.Vec3_LessThan(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GreaterThan(Vec3 v) {
    bool ret = UltraAppKitPINVOKE.Vec3_GreaterThan(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEqual(Vec3 v) {
    bool ret = UltraAppKitPINVOKE.Vec3_NotEqual(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool EqualEqual(Vec3 v) {
    bool ret = UltraAppKitPINVOKE.Vec3_EqualEqual(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_float IndexInto(uint n) {
    SWIGTYPE_p_float ret = new SWIGTYPE_p_float(UltraAppKitPINVOKE.Vec3_IndexInto(swigCPtr, n), false);
    return ret;
  }

  public Vec3 Minus(Vec3 v) {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Minus__SWIG_0(swigCPtr, Vec3.getCPtr(v)), true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MinusEqual(Vec3 v) {
    UltraAppKitPINVOKE.Vec3_MinusEqual(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vec3 Plus(Vec3 v) {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Plus(swigCPtr, Vec3.getCPtr(v)), true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void PlusEqual(Vec3 v) {
    UltraAppKitPINVOKE.Vec3_PlusEqual(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vec3 Multiply(Vec3 v) {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Multiply(swigCPtr, Vec3.getCPtr(v)), true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MultiplyEqual(Vec3 v) {
    UltraAppKitPINVOKE.Vec3_MultiplyEqual(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vec3 Divide(Vec3 v) {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Divide(swigCPtr, Vec3.getCPtr(v)), true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DivideEqual(Vec3 v) {
    UltraAppKitPINVOKE.Vec3_DivideEqual(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  public float Percent(Vec3 v) {
    float ret = UltraAppKitPINVOKE.Vec3_Percent(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3 Minus() {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Minus__SWIG_1(swigCPtr), true);
    return ret;
  }

  public Vec3 Reflect(Vec3 normal) {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Reflect(swigCPtr, Vec3.getCPtr(normal)), true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2 xy() {
    Vec2 ret = new Vec2(UltraAppKitPINVOKE.Vec3_xy(swigCPtr), true);
    return ret;
  }

  public Vec2 zy() {
    Vec2 ret = new Vec2(UltraAppKitPINVOKE.Vec3_zy(swigCPtr), true);
    return ret;
  }

  public Vec2 xz() {
    Vec2 ret = new Vec2(UltraAppKitPINVOKE.Vec3_xz(swigCPtr), true);
    return ret;
  }

  public float Length() {
    float ret = UltraAppKitPINVOKE.Vec3_Length(swigCPtr);
    return ret;
  }

  public Vec3 Normalize() {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Normalize(swigCPtr), true);
    return ret;
  }

  public Vec3 Inverse() {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Inverse(swigCPtr), true);
    return ret;
  }

  public float DistanceToPoint(Vec3 p) {
    float ret = UltraAppKitPINVOKE.Vec3_DistanceToPoint(swigCPtr, Vec3.getCPtr(p));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3 Cross(Vec3 v) {
    Vec3 ret = new Vec3(UltraAppKitPINVOKE.Vec3_Cross__SWIG_0(swigCPtr, Vec3.getCPtr(v)), true);
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Cross(Vec3 v, Vec3 result) {
    UltraAppKitPINVOKE.Vec3_Cross__SWIG_1(swigCPtr, Vec3.getCPtr(v), Vec3.getCPtr(result));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
  }

  public float Dot(Vec3 v) {
    float ret = UltraAppKitPINVOKE.Vec3_Dot(swigCPtr, Vec3.getCPtr(v));
    if (UltraAppKitPINVOKE.SWIGPendingException.Pending) throw UltraAppKitPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
